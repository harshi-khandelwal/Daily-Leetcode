152. Maximum Product Subarray
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int min_p = 1;
        int max_p = 1;
        int ans = INT_MIN;
        int n = nums.size();

        for(int i =0; i < n; i++){
            if(min_p == 0) min_p = 1;
            if(max_p == 0) max_p = 1;

            min_p *= nums[i];
            max_p *= nums[n-i-1];
            ans = max(ans, max(min_p, max_p));
        }
        return ans ;
    }
};

300. Longest Increasing Subsequence
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> res;

        for (int n : nums) {
            if (res.empty() || res.back() < n) {
                res.push_back(n);
            } else {
                int idx = binarySearch(res, n);
                res[idx] = n;
            }
        }

        return res.size();        
    }

private:
    int binarySearch(const vector<int>& arr, int target) {
        int left = 0;
        int right = arr.size() - 1;

        while (left <= right) {
            int mid = (left + right) / 2;
            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] > target) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return left;
    }    
};

1143. Longest Common Subsequence
class Solution {
public:
     int lcs(string text1, string text2,int i,int j,int n,int m){
        if(i>=n || j>=m){
            return 0;
        }
        if(text1[i] == text2[j]){
           return 1+lcs(text1,text2,i+1,j+1,n,m);
        }
        else{
           return max(lcs(text1,text2,i,j+1,n,m),lcs(text1,text2,i+1,j,n,m));
        }
     }
    //   int lcsdp(string& text1, string& text2,int i,int j,int n,int m,vector<vector<int>>& dp){
    //     if(i>=n || j>=m){
    //         return 0;
    //     }
    //     int ans = 0;
    //     if(dp[i][j]!= (-1))return dp[i][j];
    //     if(text1[i] == text2[j]){
    //        ans =  1+lcsdp(text1,text2,i+1,j+1,n,m,dp);
    //     }
    //     else{
    //        ans =  max(lcsdp(text1,text2,i,j+1,n,m,dp),lcsdp(text1,text2,i+1,j,n,m,dp));
    //     }
    //     dp[i][j] = ans;
    //     return dp[i][j];
    //  }
    int longestCommonSubsequence(string text1, string text2) {
        int n  = text1.size();
        int m = text2.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        for(int i = 1;i<=n;i++){
            for(int j = 1;j<=m;j++){
                if(text1[i-1]==text2[j-1]){
                    dp[i][j] = dp[i-1][j-1]+1;
                }else{
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }
};

72. Edit Distance
class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();

        vector<int> prev(m + 1);
        vector<int> curr(m + 1);

        for (int j = 0; j <= m; ++j)
            prev[j] = j;

        for (int i = 1; i <= n; ++i) {
            curr[0] = i;
            for (int j = 1; j <= m; ++j) {
                if (word1[i - 1] == word2[j - 1])
                    curr[j] = prev[j - 1];
                else
                    curr[j]=1+min({prev[j],curr[j - 1],prev[j- 1]});
            }
            
            prev = curr;
        }

        return prev[m];
    }
};

139. Word Break
class Solution {
public:
    unordered_map<int,bool>dp;
bool f(int i,string &s,unordered_set<string>&st){
    if(i==s.length()) return true;
    if(dp.find(i)!=dp.end()) return dp[i];
    bool ans=0;
    string cur;
    for(int j=i;j<s.length();j++)
    {
        cur+=s[j];
        if(st.find(cur)!=st.end()) ans=ans || f(j+1,s,st);
    }
    return dp[i]=ans;
}
bool wordBreak(string s, vector<string>& w) {
    unordered_set<string>st(w.begin(),w.end());
    return f(0,s,st);
}
    
};