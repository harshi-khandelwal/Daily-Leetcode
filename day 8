540. single element in a sorted array
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int s = 0;
        int e = nums.size() -1;
        while(s<e){
            int mid = (s + e) / 2;
            if(mid % 2 == 1){
                mid --;
            }
            if(nums[mid] != nums[mid+1]){
                e = mid ;
            }
            else{
                s = mid+2;
            }
        }
        return nums[s];
    }
};

33. Search in Rotated Sorted Array

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int s = 0;
        int e = nums.size() -1;

        while(s<=e){
            int mid = s + (e-s)/2;

            if(nums[mid] == target ){
                return mid;
            }
            if (nums[mid] >= nums[s]){
                if(target >= nums[s] && target < nums[mid]){
                     e= mid-1;
                }
                else{
                    s = mid +1;
                }
               
            }
             else{
                    if(target > nums[mid] && target <= nums[e]){
                        s = mid +1;
                    }
                    else{
                        e = mid -1;
                    }
                }
        }
        return -1;
    }
};

4. Median of Two Sorted Arrays
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        int m = nums2.size();

        vector<int> merge;
        for(int i =0; i < n; i++){
            merge.push_back(nums1[i]);
        }
        for(int i =0; i<m;i++){
            merge.push_back(nums2[i]);
        }

        sort(merge.begin(), merge.end());

        int total = merge.size();

        if(total % 2== 1){
            return static_cast<double>(merge[total / 2]);
        }
        else{
            int middle1 = merge[total / 2 - 1];
            int middle2 = merge[total / 2];
            return (static_cast<double>(middle1) + static_cast<double>(middle2)) / 2.0;
        }
    }
};