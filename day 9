69. sqrt(x)
class Solution {
public:
    int mySqrt(int x) {
        if(x ==0 || x== 1){
            return x;
        }

        int s = 1;
        int e = x;
        

        while(s<=e){
           int mid = s + (e-s)/2;
            long long square = static_cast<long long>(mid) * (mid);
           if(square > x){
            e = mid -1;
           }else if (square == x){
            return mid;
           }
           else{
            s = mid + 1;
           }
        }
        return static_cast<int>(std::round(e));
    }
};

154. Find Minimum in Rotated Sorted Array II

class Solution {
public:
    int findMin(vector<int>& nums) {
        int s = 0;
        int e = nums.size() -1;
        
        while(s < e){
            int mid = s + (e-s)/2;
            if(nums[mid] > nums[e]){
                s = mid + 1;
            }
            else if (nums[mid ] < nums[s]){
                e = mid;
                s++;
            }
            else{
                e--;
            }
        }
        return nums[s];
    }
};

Two Sum II - Input Array Is Sorted
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int s = 0;
        int e = numbers.size() -1;
        vector<int> ans;

        while ( s < e){
            int total = numbers[s] + numbers[e];
            if(total == target){
                ans.push_back(s+1);
                ans.push_back(e+1);
                return ans;
            }else if (total > target){
                e--;
            }else{
                s++;
            }
        }
        return ans;
    }
};

209. Minimum Size Subarray Sum
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int ini = 0 , start = 0;
        int sum = 0;
        int ans = INT_MAX;
        int n = nums.size();
        while(start < n){
            sum += nums[start];
            while( ini < n and sum >= target){
                ans = min(ans,start-ini+1);
                sum -= nums[ini];
                ini++;
            }
            start++;
        }
        return ans == INT_MAX ? 0 : ans;
    }
};

240. Search a 2D Matrix II
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rows = matrix.size();
        int cols = rows ? matrix[0].size() : 0;
        int s = 0;
        int e = cols - 1;
        while (s < rows && e>= 0) {
            if (matrix[s][e] == target) {
                return true;
            }
            matrix[s][e] > target ? e-- : s++;
        }
        return false;
    }
};
   