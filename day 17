235. Lowest Common Ancestor of a Binary Search Tree
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        int small = min(p->val, q->val);
        int large = max(p->val, q->val);
        while (root != nullptr) {
            if (root->val > large) 
                root = root->left;
            else if (root->val < small)
                root = root->right;
            else 
                return root;
        }
        return nullptr;
    }
};

173. Binary Search Tree Iterator
class BSTIterator {
public:
    stack<TreeNode*> st;
    BSTIterator(TreeNode* root) {
        solve(root);
    }
    
    int next() {
        TreeNode* temp= st.top();
        st.pop();
        return temp->val;
    }
    
    bool hasNext() {
        return (st.empty()) ? false: true;
    }

    void solve(TreeNode* root){
        if(root == NULL)return ;

        solve(root->right);
        st.push(root);
        solve(root->left);
    }
};

653. Two Sum IV - Input is a BST
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void storeInorder(TreeNode* root , vector<int>& inorder){
        if(root == NULL){
            return ;
        }
        //lnr
        storeInorder(root -> left , inorder);
        inorder.push_back(root -> val);
        storeInorder(root -> right , inorder );

    }

    bool findTarget(TreeNode* root, int k) {
        
        vector<int> inorder;
        storeInorder(root , inorder);

        //two pointer approach 
        int s =0 ;
        int e = inorder.size()-1  ;
        while(s < e){
            int sum = inorder[s]+ inorder[e];

            if(sum == k)
            return true ;

            if(sum > k)
            e--;

            else
            s++;
        }
        return false ;
         }
};

543. Diameter of Binary Tree
class Solution {
public:
    int height(TreeNode * root ){
    //base case 
    //edge case 
    if(root == NULL){
        return 0 ;
    }

    int leftHeight = height(root -> left);
    int rightHeight = height(root -> right);

    int ans = max(leftHeight , rightHeight) + 1 ;

    return ans;
}
    int diameterOfBinaryTree(TreeNode* root) {
       if(root == NULL){
        return 0;
       } 

       int op1 = diameterOfBinaryTree(root -> left);
       int op2 = diameterOfBinaryTree(root -> right);
       int op3 = height(root -> left)  + height(root -> right);
       int ans = max(op1 , max(op2 , op3));
       return ans ;
    }
};