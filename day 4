74. Search a 2D Matrix
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rows = matrix.size();
        int cols = matrix[0].size();
        int row = 0, col = cols-1;

        while(row < rows && col > -1){
            int cur = matrix[row][col];
            if(cur == target)
            return true;
            if(target > cur) row++;
            else col--;
        }
        return false;
    }
};

50. Pow(x, n)

class Solution {
public:

    double binaryExp(double x, long n){
        
        //base case : anything raised to the power 0 is 1
        if(n == 0){
            return 1;
        }

        //if n is negative the function will go to the denominator 
        if(n < 0){
            return 1.0 / binaryExp(x, -n);
        }
        //when n is odd 
        if(n%2 == 1){
            return x * binaryExp(x*x , (n-1)/2);
        }
        //when n is even 
        else{
            return binaryExp(x*x , n/2);
        }
    }


    double myPow(double x, int n) {
        return binaryExp(x, static_cast<long>(n));
    }
};

169. Majority Element

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin() , nums.end());
        int ans = nums[nums.size()/2];
        return ans ;
    }
};

62. Unique Paths

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> vec(m, vector<int>(n, 1));
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                vec[i][j]=vec[i-1][j]+vec[i][j-1];
            }
        }
        return vec[m-1][n-1];
    }
    
};

