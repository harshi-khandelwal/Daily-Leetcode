28. Find the Index of the First Occurrence in a String

class Solution {
public:
    int strStr(string haystack, string needle) {
       int size1 = haystack.length();
        int size2 = needle.length();
        
        for(int i=0; i <=(size1-size2);i++){
            string str= haystack.substr(i,size2);
            if(str==needle){
                return i;
            }
        }
        return -1;

    }
};

242. Valid Anagram

class Solution {
public:
    bool isAnagram(string s, string t) {
      int freqtable[256]={0};
      for ( int i=0 ; i<s.size();i++){
        freqtable[s[i]] ++;
      }
      for (int i =0 ; i < t.size();i++){
        freqtable[t[i]] --;
      }
      for (int i =0 ; i <256;i++){
        if (freqtable[i]!=0){
            return false ;
        }
      }
      return true ;
    }
 
};


28. Find the Index of the First Occurrence in a String

class Solution {
public:
    int strStr(string haystack, string needle) {
       int size1 = haystack.length();
        int size2 = needle.length();
        
        for(int i=0; i <= (size1-size2) ;i++){
            string str = haystack.substr(i,size2);
            if(str == needle){
                return i;
            }
        }
        return -1;
    }
};

38. Count and Say
class Solution {
public:

    string helper(int n, string start){
        if(n==0) return start;

        string comp = "";
        int i=0, j;
        while(i<start.size()){
            j=i+1;
            while(j<start.size() && start[i] == start[j]){
                j++;
            }
            comp = comp+to_string(j-i)+start[i];
            i=j;
        }
        return helper(n-1, comp);
    }
    string countAndSay(int n) {
        return helper(n-1, "1");
    }
};


165. Compare Version Numbers
class Solution {
public:
    int compareVersion(string version1, string version2) {
        int n1 = version1.size();
        int n2 = version2.size();

        //to convert string to integer 
        int x1=0, x2=0;

        for(int i=0, j=0; i<n1 || j<n2; i++, j++){
            while(i<n1 && version1[i]!='.'){
                x1=10*x1+(version1[i++]-'0');
            }
            while(j<n2 && version2[j]!='.'){
                x2=10*x2+(version2[j++]-'0');
            }
            if (x1<x2) return -1;
            else if (x1>x2) return 1;
            x1=0;
            x2=0;
        }
        return 0;
    }
};
