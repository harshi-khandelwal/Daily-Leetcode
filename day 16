700. Search in a Binary Search Tree
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        if(!root){
            return nullptr;
        }
        if(root->val == val){
            return root;
        }else if(root-> val > val){
            return searchBST(root->left, val);
        }else{
            return searchBST(root -> right, val);
        }
    }
};

701. Insert into a Binary Search Tree
class Solution {
public:
    void insert(TreeNode* root, int val){
        if(root == NULL) {
            root = new TreeNode(val);
        }
        else if(root -> val > val){
            if(root -> left == NULL){
                root-> left = new TreeNode(val);
            }
            else insert(root->left, val);
        }
        else{
            if(root->right == NULL){
                root->right = new TreeNode(val);
            }
            else{
                insert(root-> right, val);
            }
        }
    }
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        insert(root, val);
        if(root == NULL)
        root = new TreeNode(val);
        return root;
    }
};

450. Delete Node in a BST
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* find(TreeNode* node){
        while(node && node->left)
        node = node-> left;
        return node;
    }

    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return nullptr;
        
        if(key < root-> val){
            root-> left = deleteNode(root-> left, key);
        }else if(key > root -> val){
            root -> right = deleteNode(root->right, key);
        }
        else{
            if(root->left == nullptr){
                TreeNode* temp = root-> right;
                delete root;
                return temp;
            }
             if(root->right == nullptr){
                TreeNode* temp = root-> left;
                delete root;
                return temp;
            }
            TreeNode* res = find(root->right);
            root-> val = res-> val;
            root-> right = deleteNode(root->right, res->val);
        }
        return root;
    }
};

230. Kth Smallest Element in a BST
class Solution {
public:
    void inorderTraversal(TreeNode* root, vector<int> &v){
        if(root == NULL) return ;
        inorderTraversal(root->left, v);
        v.push_back(root-> val);
        inorderTraversal(root->right, v);
    }
    int kthSmallest(TreeNode* root, int k) {
        //inorder traversal gives nodes in sorted amnner so if we find the inorder index then array can be visited and res can be derived
        vector<int> v;
        inorderTraversal(root, v);
        int ans = v[k-1];
        return ans ;
    }
};

98. Validate Binary Search Tree
class Solution {
public:
    bool ispossible(TreeNode* root, long long min, long long max){
    if(root == nullptr)  return true;
    if(root->val < max and root->val > min)
        return( ispossible(root->left, min, root->val) && ispossible(root->right, root->val, max));
    else return false;
}
    bool isValidBST(TreeNode* root) {
        long long int min = -1000000000000, max = 1000000000000;
        // cant be done by int min and intmax because boundary issues 
        return ispossible(root, min, max);
    }
};