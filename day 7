94. Binary Tree Inorder Traversal

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void inorder(TreeNode* root, vector<int> &v){
        if(root == NULL){
            return;
        }
        inorder(root ->left, v);
        v.push_back(root -> val);
        inorder(root -> right, v);

    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> arr;

        inorder(root, arr);

        return arr;
    }
};


144. binary tree preorder traversal

class Solution {
public:

    // void preorder(TreeNode* root, vector<int> &arr){
    //     if(root == NULL)
    //     return;

    //     arr.push_back(root-> val);
    //     preorder(root ->left, arr);

    //     preorder(root->right, arr);
    // }

    
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> preorder;

        if(root == NULL){
            return preorder;
        }

        stack<TreeNode*> st;

        st.push(root);

        while(!st.empty()){
            TreeNode * node = st.top();
            st.pop();

            preorder.push_back(root->val);
            
            
            if(root->right != NULL) {
                st.push(root->right);
            }
            
            
            if(root->left != NULL) {
                st.push(root->left);
            }
        }
        
        
        return preorder;
    }
};

145. binary tree postorder traversal

class Solution {
public:

    void postorder(TreeNode* root, vector<int> &v){
        if(root == NULL){
            return ;
        }
        
        postorder(root -> left, v);
        postorder(root -> right, v);
        v.push_back(root -> val);

    }
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> v;

        postorder(root, v);

        return v;
    }
};


94. Binary Tree Inorder Traversal

class Solution {
public:

    void inorder(TreeNode* root, vector<int> &v){
        if(root == NULL){
            return;
        }
        inorder(root ->left, v);
        v.push_back(root -> val);
        inorder(root -> right, v);

    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> arr;

        inorder(root, arr);

        return arr;
    }
};

987. Vertical Order Traversal of a Binary Tree

class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        if(root == NULL)
        return{};

        vector<vector<int>> ans;

        map<int,map<int,vector<int>>> nodes;
        queue<pair<TreeNode*, pair<int,int>>> q;
        q.push(make_pair(root, make_pair(0,0)));

        while(!q.empty()){
            pair<TreeNode*, pair<int,int>> temp = q.front();
            q.pop();

            TreeNode * frontNode = temp.first;
            int hd = temp.second.first;
            int level = temp.second.second;

            nodes[hd][level].push_back(frontNode -> val);

            if(frontNode -> left){
                q.push(make_pair(frontNode -> left, make_pair(hd-1, level +1)));
            }

            if(frontNode -> right){
                q.push(make_pair(frontNode-> right, make_pair(hd+1, level+1)));
            }
        }

        for(auto i : nodes){
            vector<int> level;
            for(auto j : i.second){
                sort(j.second.begin(), j.second.end());
                for(auto k: j.second){
                    level.push_back(k);
                }
            }
            ans.push_back(level);
        }
        return ans;
    }
};