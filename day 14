992. Subarrays with K Different Integers
class Solution {
public:

    int counting (vector<int>v, int k){
        int count =0;
        unordered_map<int, int> mp1;
        int st =0;
        int end =0;
        int n =v.size();
        while(end < n){
            mp1[v[end]]++;
            while(mp1.size() >k){
                mp1[v[st]]--;
                if(mp1[v[st]] == 0){
                    mp1.erase(v[st]);
                }
                st++;
            }
            count += end - st+1;
            end++;
        }
        return count;
    }
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        return counting(nums,k) - counting(nums,k-1);
    }
};

1248. Count Number of Nice Subarrays
class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
       unordered_map<int,int> mpp;
       int count =0;
       int sum = 0;

       for(int i=0;i<nums.size();i++){
        if(nums[i] %2 ==0){
            sum+=0;
        }
        else{
            sum += 1;
        }
        if(sum == k){
        count++;
        }
        if(mpp.find(sum-k)!=mpp.end()){
            count+=mpp[sum-k];
         }
         mpp[sum]++;
       }
       return count;
       

    }
};

1358. Number of Substrings Containing All Three Characters
class Solution {
public:
    int numberOfSubstrings(string s) {
        int count = 0;
        int left = 0;
        unordered_map<char, int> char_count = {{'a', 0}, {'b', 0}, {'c', 0}};
        
        for (int right = 0; right < s.length(); ++right) {
            char_count[s[right]]++;
            
            while (char_count['a'] > 0 && char_count['b'] > 0 && char_count['c'] > 0) {
                count += s.length() - right;
                char_count[s[left]]--;
                left++;
            }
        }
        
        return count;
    }
};