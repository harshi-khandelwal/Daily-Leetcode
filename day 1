// 1752. Check if Array Is Sorted and Rotated

// class Solution {
// public:
//     bool check(vector<int>& nums) {
//         int n = nums.size();
//         int count = 0;
        
//         for (int i = 1; i < n; i++)
//             if (nums[i - 1] > nums[i])
//                 count++;
        
//         if (nums[n - 1] > nums[0])
//             count++;
        
//         return count <= 1;
//     }
// };

// 26. Remove Duplicates from Sorted Array

// class Solution {
// public:
//     int removeDuplicates(vector<int>& nums) {
//         if (nums.empty()) return 0;

//         int i = 1;

//         for (int j = 1; j < nums.size(); j++) {
//             if (nums[j] != nums[i - 1]) {
//                 nums[i] = nums[j];
//                 i++;
//             }
//         }

//         return i;        
//     }
// };

// 189. Rotate Array

// class Solution {
// public:
//     void rotate(vector<int>& nums, int k) {
//         int n = nums.size();
//         k = k % n;

//         reverse(nums.begin(), nums.end());
     
//         reverse(nums.begin(), nums.begin() + k);
    
//         reverse(nums.begin() + k, nums.end());
//     }
// };

// 283. Move Zeroes

// class Solution {
// public:
//     void moveZeroes(vector<int>& nums) {
//         int right =0 ;
//         int left =0 ;
//         for(int right = 0 ; right < nums.size() ; right++){
//             if(nums[right] != 0){
//                 swap(nums[right] , nums[left]);
//                 left++;
//             }
//         }
//     }
// };

// 268. Missing Number

// class Solution {
// public:
//     int missingNumber(vector<int>& nums) {
//         int n = nums.size();
//         int ans = 0 ;
//         for(int i =0 ; i <= n ; i++){
//             ans = ans ^ i;

//        }
//        for(int i =0 ; i < n ; i++){
//         ans = ans ^nums[i];
//        }
//        return ans ;
//     }
// };

// 485. Max Consecutive Ones

// class Solution {
// public:
//     int findMaxConsecutiveOnes(vector<int>& nums) {
        
//         int count = 0 ;
//         int maxCount = 0 ;
//         for(int i =0 ; i < nums.size() ; i++){
//             if(nums[i] == 1){
//                 count++;
//             }
//             maxCount = max(count , maxCount);
//             if(nums[i] != 1){
//                 count = 0;
//             }
//         }

//         return maxCount ;
//     }
// };

// 136. Single Number

// class Solution {
// public:
//     int singleNumber(vector<int>& nums) {
//         sort(nums.begin() , nums.end());
//         int ans ;
//         if(nums.size()==1){
//             return nums[0] ;
//         }

//         for(int i = 1 ; i < nums.size() ; i+=2){
//             if(nums[i] != nums[i-1]){
//                 ans = nums[i-1];
//                 return ans ;

//             }
//          ans = nums[nums.size()-1] ; 
//         }
//         return ans;
//     }
// };

// total questions solved 7